#+Title: Talks
#+Author: Mario Román
#+Email: mromang08@gmail.com
#+OPTIONS: num:nil reveal_mathjax:t toc:nil
#+REVEAL_THEME: night
#+REVEAL_TRANS: linear

* Emacs
** Introducción
*** ¿Por qué Emacs?

 1. Editor de texto plano
 2. Con intérprete de Lisp
 3. Software libre

*** Partes
Esta charla va a constar de cuatro partes:

 - 1. *Preparando Emacs*, en la que vamos a instalar y aprender a configurar Emacs.
 - 2. *Usando Emacs*, en la que vamos a ver ejemplos de uso.
 - 3. *Extendiendo Emacs*, muestra del potencial de Emacs.
 - 4. *Mi configuración*, paquetes que personalmente encuentro útiles.

** Preparando Emacs
*** Instalación de Emacs
[[./images/emacspage.png]]

#+begin_src bash
ARCH:     sudo pacman -S emacs
UBUNTU:   sudo apt install emacs25
#+end_src 

*** Pantalla de incio
#+attr_html: :width 500px
[[./images/1.startscreen.png]]

*** Abriendo un archivo, cambiando buffers
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
# #+attr_html: :width 653px
[[./images/3.testfile.gif]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
Abrir nuevo archivo con un comando:
#+BEGIN_SRC bash
Alt+x find-file  || M-x find-file
#+END_SRC

O con un atajo de teclado:
#+BEGIN_SRC bash
Ctrl+x Ctrl+f    || C-x C-f
#+END_SRC

Y podemos cambiar entre archivos abiertos con:
#+BEGIN_SRC bash
Ctrl+x <left>    || C-x left
Ctrl+x <right>   || C-x right
#+END_SRC
#+REVEAL_HTML: </div>

*** Teclas básicas

|---------+-----------------+----------------|
| Atajo   | Comando         | Acción         |
|---------+-----------------+----------------|
| C-x C-s | save-buffer     | Guardar        |
| C-x C-f | find-file       | Abrir          |
| C-g     | keyboard-quit   | Aborta comando |
| C-s     | isearch-forward | Buscar         |
| C-w     | kill-region     | Cortar         |
| M-w     | kill-ring-save  | Copiar         |
| C-y     | yank-pop        | Pegar          |
|---------+-----------------+----------------|

=C-g= interrumpe cualquier comando.
En =C-h= podéis buscar ayuda sobre comandos. *CUA-mode* es una opción.
Intentad aprender los atajos teniéndolos en un folio.

*** Archivo de configuración
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
#+attr_html: :width 450px
[[./images/2.dotfile.png]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
Dos posibles nombres de los archivos de configuración en Emacs:

#+BEGIN_SRC bash
~/.emacs
~/.emacs.d/init.el
#+END_SRC

Reiniciando la configuración de Emacs:

#+BEGIN_SRC bash
mv ~/.emacs ~/.emacs.old
#+END_SRC 
#+REVEAL_HTML: </div>

*** Preferencias

#+attr_html: :width 600px
[[./images/4.config.gif]]

*** Preferencias en el archivo de configuración
#+attr_html: :width 500px
[[./images/5.postconfig.png]]

*** Extensiones: Preparando los repositorios
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
[[./images/6.melpa.gif]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
Entramos en: 

#+BEGIN_SRC bash
M-x customize-group package 
// package-archives
#+END_SRC

Y añadimos: 
#+BEGIN_SRC bash
melpa
http://melpa.milkbox.net/packages
#+END_SRC

Y podemos instalar con:
#+BEGIN_SRC bash
M-x package-list-packages
#+END_SRC

#+REVEAL_HTML: </div>

*** MELPA
[[./images/melpa.png]]

** Usos de Emacs
*** Programación
#+attr_html: :width 800px
[[./images/cprogramming.png]]

[[http://cachestocaches.com/2015/8/c-completion-emacs/][C completion in Emacs]] - Gregory Stein

*** Programación
#+attr_html: :width 800px
[[./images/jsprogramming.gif]]

[[http://vinitkumar.me/articles/2014/05/04/Setting-Up-Emacs-For-Development/][Setting up Emacs for development]] - Vinit Kumar

*** Org-mode
[[./images/orgview.png]]

[[http://correl.phoenixinquis.net/2014/11/25/getting-organized-with-org-mode.html][Getting organized with org-mode]] - Correl Roush

*** Apuntes en Latex
#+attr_html: :width 550px
[[./images/latexemacs.png]]

/Imagen de una [[http://stackoverflow.com/questions/19274832/how-to-configure-emacs-to-use-variable-fonts-to-display-the-previsualisation-of][pregunta]] en StackOverflow/.

** Paquetes y configuraciones
*** Múltiples cursores
[[./images/delete-example.gif]]

[[https://mollermara.com/blog/ace-mc/][ace-mc]], Josh Moller-Mara

*** eww
#+attr_html: :width 600px
[[./images/eww.png]]

*** Macros
Registran una serie de acciones y las repiten:

|----+-------------------|
| f3 | Empieza a grabar  |
| f4 | Termina de grabar |
| f4 | Repite la macro   |
|----+-------------------|

*** Emacs server
#+BEGIN_SRC bash
  emacs --daemon # runs at startup
  emacsclient    # opens a new client
#+END_SRC

[[https://www.youtube.com/watch?v=KG7ze_WN0As][Emacs normal vs. Emacs daemon]] - Jae-oh Kim

#+BEGIN_NOTES
Usar Emacs como demonio del sistema que arranca al inicio
hace que cuando queramos usarlo esté ya arrancado y no gaste
tiempo en arrancar. En el vídeo se muestra una comparación.

Es ligeramente más complicado conseguir que empiece a funcionar
y por eso no lo tratamos hoy.
#+END_NOTES
*** Esta presentación
¡Esta presentación está escrita en Emacs con =org-mode=!
*** Código con org-babel
#+BEGIN_SRC ruby :export both
  def prime(p)
    return (2..Math.sqrt(p)).none? { |d| p % d == 0 }
  end

  [prime(42),prime(97),prime(5),prime(7),prime(9)]
#+END_SRC

#+RESULTS:
| false | true | true | true | false |

| false | true | true | 
  
*** UMLs con artist-mode
#+BEGIN_SRC ditaa :file ./images/uml.png :export both
  +------------------+
  |  UML             |                                  +---------------------------+
  +------------------+          +--------------+        |                           |
  | private int a    |          | Cosas        |        |                           |
  | public string b  |     /----+              |        |  Cosas UML                |
  |                  +-----/    |              |        |                           |
  |                  |          |              |        |                           |
  |                  |          +--------------+        +---------------------------+
  +------------------+
#+END_SRC

#+RESULTS:
[[file:./images/uml.png]]

[[https://www.youtube.com/watch?v=cIuX87Xo8Fc][Poor's Man UML]] - Emacs Artist Mode
** Mi configuración
*** Magit para repositorios

[[./images/magit.png]]

*** Ayuda a la traducción

[[./images/dictreplace.gif]]

*** Blog usando org-page

[[./images/orgpage.png]]

*** Matemáticas en org-mode
#+attr_html: :width 700px
[[./images/orgmath.png]]

*** Imágenes en org-mode

[[./images/orgpinta.jpg]]

*** Código en org-mode

[[./images/orgbabel.png]]

*** Integración con sage

[[./images/orgsage.jpg]]

*** Sage dibujando gráficas
 #+BEGIN_SRC sage :file ./images/sageplot.png
 x = var('x')
 p1 = parametric_plot((cos(x),sin(x)),(x,0,2*pi),rgbcolor=hue(0.2))
 p2 = parametric_plot((cos(x),sin(x)^2),(x,0,2*pi),rgbcolor=hue(0.4))
 p3 = parametric_plot((cos(x),sin(x)^3),(x,0,2*pi),rgbcolor=hue(0.6))
 show(p1+p2+p3)
 #+END_SRC

 #+RESULTS:
 [[file:./images/sageplot.png]]

#+attr_html: :width 400px
file:./images/sageplot.png

** Referencias
*** Artículo del blog
Todo lo que explico en esta presentación está en:

 - [[http://tux.ugr.es/dgiim/blog/2016/09/19/aprendiendo-emacs/][El artículo del blog de LibreIM]]
 - [[https://www.emacswiki.org][Emacs wiki]]

#+BEGIN_NOTES
Un último consejo: aprended Emacs poco a poco, pasito a pasito,
id probando cada configuración y cada detalle y acostumbraros a él.
A la larga podréis ir avanzando cada vez más rápido.
#+END_NOTES

*** Recursos
Páginas de recursos sobre Emacs:

 - [[http://sachachua.com/blog/category/geek/emacs/][Sacha Chua - Emacs News]]
 - [[http://cestlaz.github.io/stories/emacs/][C'est la Z - Using Emacs]]
 - [[https://emacsgifs.github.io/][Emacs gifs]]

En estos blogs se listan noticias, tutoriales e ideas para la
configuración de Emacs.

*** Emacs StackExchange
[[./images/emacsse.png]]

#+BEGIN_NOTES
Podéis preguntar dudas sobre Emacs en el foro dedicado de StackExchange.
#+END_NOTES

*** How Emacs changed my life
Es el título de una charla de *Yukiro Matsumoto*:

 1. Emacs taught me freedom for software.
 2. Emacs taught me how to code.
 3. Emacs taught me the power of Lisp.
 4. Emacs taught me how to implement a core language.
 5. Emacs taught me how to implement a garbage collector.
 6. Emacs helped me to code and debug.
 7. Emacs helped me to write and edit text/mails/documents.
 8. Emacs helped me to be an effective programmer.
 9. Emacs made me a hacker.
 10. Emacs has changed my life.

*** LibreIM
#+attr_html: :width 150px
[[./images/libreim.png]]

Seguid a LibreIM para más seminarios. ¡Podéis colaborar con el blog o
preparando seminarios!

 - Twitter:  =@libreim_=
 - Blog:     =tux.ugr.es/dgiim=
 - Telegram: =https://telegram.me/libreimseminarios=
